// Default empty project template
#include <bb/cascades/Application>
#include <bb/cascades/QmlDocument>
#include <bb/cascades/AbstractPane>

#include <QLocale>
#include <QTranslator>
#include "WordsPlus.hpp"
#include <scoreloop/scoreloopcore.h>

/* use your credentials (and SLAward.bundle) */
#define GAME_ID         "acb55270-30e0-47b2-9d27-564f7bb163a6"
#define GAME_SECRET     "lQh1gNf3W9LJ53kAklF5x/YOLx1JJbSwsAXI7OBxWegNoYWaT/GRNA=="
#define GAME_VERSION	"1.0"
#define GAME_CURRENCY   "GRL"
#define GAME_LANGUAGE   "en"
//#define AN_AWARD_ID     "com.scoreloop.demo.smiley"

/* Some simple logging */
#define LOG(fmt, args...)   do { fprintf(stdout, "[Scoreloop] " fmt "\n", ##args); fflush(stdout); } while (0);

/*-------------------------------------------------------------------------------------*
 * Types
 *-------------------------------------------------------------------------------------*/

/* Your application will probably have some top level representation like this. */
typedef struct AppData_tag {
    SC_Client_h client;
    SC_Score_h score;
    SC_UserController_h userController;
    SC_ScoreController_h scoreController;
    SC_ScoresController_h scoresController;
    SC_LocalAchievementsController_h achievementsController;
    SC_ChallengeController_h challengeController;
    SC_ChallengesController_h challengesController;
    //dialog_instance_t dialog;
} AppData_t;

/*-------------------------------------------------------------------------------------*
 * Forward Declarations
 *-------------------------------------------------------------------------------------*/

static void RequestUser(AppData_t *app);
static void RequestUserCompletionCallback(void *userData, SC_Error_t completionStatus);



using namespace bb::cascades;

int main(int argc, char **argv)
{

/* SCORELOOP */

		AppData_t appData;
		    SC_InitData_t initData;
		    SC_Error_t rc;
		    char versionBuffer[0x100]; /* Thats 256 bytes */

		    LOG("Starting Scoreloop Sample...")

		    /* Initialize the BPS event system */
		    bps_initialize();
		    bps_set_verbosity(0); /* Set to 1 or 2 for more output if you like */
		    //navigator_request_events(0);
		    //dialog_request_events(0);

		    memset(&appData, 0, sizeof(AppData_t));

		    /* Initialize the Scoreloop platform dependent SC_InitData_t structure to default values. */
		    SC_InitData_Init(&initData);

		    /* What version of the Scoreloop library do we use? */
		    if (SC_GetVersionInfo(&initData, versionBuffer, sizeof(versionBuffer))) {
		        LOG("Version-Info: %s", versionBuffer);
		    }

		    /* Now, create the Scoreloop Client with the initialized SC_InitData_t structure
		     * as well as the game-id and game-secret as found on the developer portal.
		     */
		    LOG("SC_Client_New - Start");
		    rc = SC_Client_New(&appData.client, &initData, GAME_ID, GAME_SECRET, GAME_VERSION, GAME_CURRENCY, GAME_LANGUAGE);
		    if (rc != SC_OK) {
		    	LOG("SC_Client_New - Error");
		        //HandleError(&appData, rc);
		    }
		    else {
		    	LOG("SC_Client_New - Success");
		        //InformUser(&appData, "Note", "Scoreloop Sample started...");

		        /* Request the user here just for demonstration purposes */
		        RequestUser(&appData);
		    }

/* SCORELOOP */


    // this is where the server is started etc
    Application app(argc, argv);

    // localization support
    QTranslator translator;
    QString locale_string = QLocale().name();
    QString filename = QString( "WordsPlus_%1" ).arg( locale_string );
    if (translator.load(filename, "app/native/qm")) {
        app.installTranslator( &translator );
    }

    new WordsPlus(&app);

    // we complete the transaction started in the app constructor and start the client event loop here
    return Application::exec();
    // when loop is exited the Application deletes the scene which deletes all its children (per qt rules for children)
}

/*-------------------------------------------------------------------------------------*
 * Functions
 *-------------------------------------------------------------------------------------*/

static void RequestUser(AppData_t *appData)
{
    /* Create a UserController */
    SC_Error_t rc = SC_Client_CreateUserController(appData->client, &appData->userController, RequestUserCompletionCallback, appData);
    if (rc != SC_OK) {
    	LOG("Requesting User - Error");
        //HandleError(app, rc);
        return;
    }

    /* Make the asynchronous request */
    rc = SC_UserController_LoadUser(appData->userController);
    if (rc != SC_OK) {
        SC_UserController_Release(appData->userController);
        LOG("Requesting User - Release UserControl - Error");
        //HandleError(app, rc);
        return;
    }
    LOG("Requesting User...");
}

static void RequestUserCompletionCallback(void *userData, SC_Error_t completionStatus)
{
	LOG("RequestUserCallback - Start");
    /* Get the application from userData argument */
    AppData_t *appData = (AppData_t *) userData;
    char buf[0x100];

    /* Check completion status */
    if (completionStatus != SC_OK) {
        SC_UserController_Release(appData->userController); /* Cleanup Controller */
        LOG("Requesting User Callback - Error");
        //HandleError(app, completionStatus);
        return;
    }
    LOG("Done requesting User");

    /* Get the session from the client. */
    SC_Session_h session = SC_Client_GetSession(appData->client);

    /* Get the session user from the session. */
    SC_User_h user = SC_Session_GetUser(session);

    /* Write out some user data */
    SC_String_h login = SC_User_GetLogin(user);
    LOG("  User's login: %s", login ? SC_String_GetData(login) : "<unknown>");
    SC_String_h email = SC_User_GetEmail(user);
    LOG("  User's email: %s", email ? SC_String_GetData(email) : "<unknown>");

    /* Also show login in dialog for convenience */
    snprintf(buf, sizeof(buf), "Scoreloop login name: %s", login ? SC_String_GetData(login) : "<unknown>");
    //InformUser(app, "Note", buf);

    /* We don't need the UserController anymore, so release it */
    SC_UserController_Release(appData->userController);

    /* Submit a random score here just for demonstration purposes */
    //SubmitScore(app, GetScoreResult(app), 0);
}
